Node* Trie::Find(char c, char* word)
{
	if (word == "\0") return NULL;
	Node* cur = root;
	int cursor = 0;
	for (;cursor < strlen(word);cursor++)
		if (cur->next[int(word[cursor])] != NULL)
			cur = cur->next[int(word[cursor])];
		else break;
	if (cursor < strlen(word)) return NULL; //word not found
	// word found // cur now is pointing to the Node contain "word" 
	if (c == ' ') return cur;
	if (c == '#' || c=='$')
	{
		Node* result = new Node;
		result->info = new detail;
		details *cur_res=result->info ,*cur_word = cur->info;
		
		for (;cur_word != NULL;cur_word = cur_word->next)
		{
			for (details *tmp = root[int(c)].info, tmp != NULL;tmp = tmp->next)
			{
				if (tmp->file_id == cur_word->file_id)
				{
					for (vector<int>::iterator i = tmp->pos.begin();i < tmp->pos.end();i++)
						for (vector<int>::iterator j = cur_word->pos.begin();j < cur_word->pos.end();j++)
							if (*i + 2 == *j)
							{
								cur_res->next = new details;
								cur_res = cur_res->next;
								cur_res->file_id = tmp->file_id;
								cur_res->pos.push_back(*i);
								cur_res->next = NULL;
							}
				}
			}
		}
		cur_res = result->info;
		result->info = result->info->next;
		delete cur_res;
		return result;
	}
	return NULL;
}
